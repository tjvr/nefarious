
defprim Bool:a and Bool:b { BOOL_AND a b }
defprim Bool:a or Bool:b { BOOL_OR a b }
defprim not Bool:x { BOOL_NOT x }

defprim Int:a + Int:b { INT_ADD a b }
defprim Int:a - Int:b { INT_SUB a b }
defprim Int:a < Int:b { INT_LT a b }
defprim random from Int:a to Int:b { INT_RANDOM a b }
defprim float Int:a { INT_FLOAT a }

defprim Float:a + Float:b { FLOAT_ADD a b }
defprim Float:a - Float:b { FLOAT_SUB a b }
defprim Float:a < Float:b { FLOAT_LT a b }
defprim round Float:f { FLOAT_ROUND f }

defprim join (List Text):pieces { TEXT_JOIN pieces }
defprim join (List Text):pieces with Text:sep { TEXT_JOIN_WITH pieces sep }
defprim split Text:t { TEXT_SPLIT t }
defprim split Text:text by Text:sep { TEXT_SPLIT_BY text sep }

defprim add Any:x to (List Any):l { LIST_ADD l x }
defprim length of (List Any):l { LIST_LEN l }
defprim item Int:i of (List Any):l { LIST_GET l i }
define item last of (List Any):l { item length of l of l }
define item first of (List Any):l { item 1 of l }

define # Text:comment {}

define repeat Int:count Block:body {
    var c := count
    let result = []
    WHILE (0 < c) {
        add (call body) to result
        c := c - 1

    }
    result
}

define range from Int:start to Int:stop {
    var count := start
    let result = []
    WHILE (count < (stop + 1)) {
        add count to result
        count := count + 1
    }
    result
}

#" end preamble "



define fib Float:n {
    IF_THEN_ELSE (n < 2.0) 1.0 ((fib (n - 1.0)) + (fib (n - 2.0)))
}

define fastfib Int:n {
    let seq = [1 1]
    repeat n - 1 {
        let index = length of seq
        let a = item last of seq
        let b = item index - 1 of seq
        add (a + b) to seq
    }
    item last of seq
}

repeat 20 { random from 0 to 10 }

